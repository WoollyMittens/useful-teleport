/*
Constants
*/
/*
Hides text in the margin
*/
/*
Turns a button into an icon
*/
/*
Centres a graphic or glyph inside an icon
*/
/*
Offers both the pixel and rem value of a single property
*/
/*
Offers both the pixel and rem values of a shorthand property
*/
/*
Offers the text size as both the pixel and rem value
*/
/*
Adds vendor prefixed to a property
*/
/*
Applies the "clearfix" hack to a container with floating content
*/
.teleport-example {
  border: solid 1px #000; }
  .teleport-example *, .teleport-example *:before, .teleport-example *:after {
    box-sizing: border-box; }
  .teleport-example header,
  .teleport-example footer {
    background-color: #ccc;
    padding: 1rem; }
  .teleport-example header {
    border-bottom: solid 1px #000; }
    @media (min-width: 768px) {
      .teleport-example header {
        text-align: right; } }
  .teleport-example footer {
    border-top: solid 1px #000; }
  .teleport-example button {
    cursor: pointer;
    border: none;
    background-repeat: no-repeat;
    background-size: contain;
    background-position: center;
    text-indent: 125%;
    overflow: hidden;
    padding: 0;
    margin: 0;
    width: 1.6rem;
    height: 1.6rem; }
  .teleport-example nav {
    display: -webkit-flex;
    display: flex;
    -webkit-justify-content: space-around;
    justify-content: space-around;
    background-color: #eee;
    border-bottom: solid 1px #000;
    padding: 0.5rem 1rem; }
    @media (max-width: 767px) {
      .teleport-example nav {
        margin: -1px 0 0 0;
        padding: 0;
        -webkit-flex-direction: column;
        flex-direction: column;
        transition: max-height ease-in-out 1000ms;
        max-height: 0;
        overflow: hidden; }
        .teleport-example nav.open {
          max-height: 20rem; }
        .teleport-example nav a {
          display: block;
          padding: 0.5rem 1rem;
          border-top: solid 1px #000; } }
  .teleport-example article {
    height: 20rem;
    overflow: auto;
    padding: 1rem; }
    .teleport-example article h2 {
      margin-top: 0; }
    .teleport-example article p:last-child {
      margin-bottom: 0; }

.teleport-toggle {
  background: Transparent url("../img/icon-menu.svg"); }
  @media (min-width: 768px) {
    .teleport-toggle {
      display: none; } }

@media (max-width: 767px) {
  .teleport-search {
    border-top: solid 1px #000;
    padding: 1rem; } }

.teleport-search input[type=text] {
  vertical-align: middle;
  margin-right: 0.3em;
  border: solid 1px #000;
  height: 2.2rem;
  padding: 0.1rem 0.5rem; }
  @media (max-width: 767px) {
    .teleport-search input[type=text] {
      width: 100%;
      margin-right: -2.2rem; } }

.teleport-search button {
  vertical-align: middle;
  background: Transparent url("../img/icon-search.svg"); }

/*# sourceMappingURL=data:application/json;charset=utf8;base64, */
